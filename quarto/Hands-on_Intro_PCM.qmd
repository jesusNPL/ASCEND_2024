---
title: "Introduction to Phylogenies and the Comparative Method"
description: Showing some neat features of R!
date: today # other options: now, last-modified
authors:
  - name: JesÃºs N. Pinto-Ledezma 
    url: https://jesusnpl.github.io
    affiliation: Ecology, Evolution & Behavior, University of Minnesota
                ASCEND - Summer training 2024
    affiliation-url: https://github.com/jesusNPL/BiodiversityScience
title-block-banner: true
#title-block-banner: "#562457"
format: 
  html: 
    embed-resources: true # save contained file.
    theme: spacelab # check other themes https://quarto.org/docs/output-formats/html-themes.html 
    code-fold: true
    toc: true
    number-sections: true
bibliography: ../references_PCM.bib
link-citations: true
csl: ../apa-single-spaced.csl
---

::: callout-note
In this exercise, you will learn basic tools in R for visualizing phylogenies, testing models of character evolution, performing phylogenetic correction of a regression model, and test for the phylogenetic signal of continuous characters. This lab is based in part on one designed by [Luke Harmon](https://scholar.google.com/citations?hl=en&user=nsA3IsgAAAAJ&view_op=list_works) for a workshop that he and others ran at Ilha Bela, Brazil; the original can be seen [here](http://lukejharmon.github.io/ilhabela/instruction/2015/07/03/PGLS/) There are many other useful labs in comparative analysis from that [workshop](http://lukejharmon.github.io/ilhabela/) that you can peruse at your leisure.
:::

You will need two datasets, that will be provided for you:

1.  A data.frame with species and mean spectra values -- **NIMBioS_spectra_sample.csv**

2.  A phylogenetic tree -- **NIMBioS_phylogeny.nex**

# Clone the repository

You can clone the repository using Git. Mac and Linux users have Git installed natively in their computers, but if you are a Windows user, you might need to install Git first (https://git-scm.com/download/win)

To clone the repository, you just need (**example for Mac**) to follow the next steps:

1. Open terminal 

2. Type "pwd" without quotes. This means Print Working Directory. 

3. Type "cd" without quotes followed by the folder you want to work on, for example: cd Documents

4. Type the following command 

4.1. git clone https://github.com/jesusNPL/ASCEND_2024.git

This command will clone the full repository in the folder you selected. That's it!

# Set up your data and your working directory

For this lab, you will need to have a set of R packages to do this lab. Install the following packages:

```{r}
#| eval: true
# Package vector names 
packages <- c("tidyverse", "ape", "geiger", "ggnewscale", "knitr", 
              "rotl", "phytools", "neonUtilities", "devtools") 

```

::: callout-tip
## Function install.packages()

You can use the function **install.packages()** to install the packages.
:::

If you don't want to install the packages one by one, you can use the next command.

```{r}
#| eval: true
# Install packages not yet installed 
# get packages already installed
installed_packages <- packages %in% rownames(installed.packages())

# If the packages are installed skip if not install them
if (any(installed_packages == FALSE)) {
  install.packages(packages[!installed_packages], dependencies = TRUE)
}

```

This command, will, first, check if you already the packages installed, then if a package is not installed in your computer, will install it.

We will also need the R package {V.PhyloMaker} to obtain a phylogenetic tree for our plant species. Note that this package is not located in CRAN, so we will install the package directly from the [author's github](https://github.com/jinyizju/V.PhyloMaker).

```{r}
#| eval: true

if ( ! ("V.PhyloMaker" %in% installed.packages())) {remotes::install_github("jinyizju/V.PhyloMaker")}

```


Load installed packages:

```{r}
#| eval: true

library(tidyverse)
library(ape)
library(geiger)
library(phytools)
library(neonUtilities)
library(V.PhyloMaker)
library(rotl)

```

Set up a working directory. Tell R that this is the directory you will be using, and read in your data:

::: callout-tip
## Function getwd()

You can use the function **getwd()** to get the current working directory.
:::

```{r}
#| eval: false

setwd("path/for/your/directory")

```

::: callout-tip
## Function dir.create()

You can use the function **dir.create()** to get create a series of folders within your working directory. For example, if you run **dir.create("Output")** it will create an empty folder--named Output--within your working directory. This folder then can be used to store the results from the lab.
:::

# Part 1 - Obtain a phylogenetic tree

## Get phylogenetic hypothesis from the Open Tree of Life

Using the R package {rotl} we can obtain a tree for a particular taxonomic group, e.g., Pines (genus Pinus). Note that a detailed example of how to get phylogenies from the **Open tree of Life** can be found [here](https://cran.r-project.org/web/packages/rotl/vignettes/rotl.html).

```{r}
#| eval: true

# get Taxonomic ID
pinus_id <- tnrs_match_names("Pinus")

## Use taxonomic ID to get a phylogeny for Pines
pinus_otl_tree <- tol_subtree(ott_id = ott_id(pinus_id))

```

Explore the results

```{r}
#| eval: true

pinus_otl_tree 

```
```{r}
#| eval: true

plot(pinus_otl_tree, show.tip.label = FALSE)
axisPhylo()

```

```{r}
#| eval: true

head(pinus_otl_tree$tip.label, 10)

```

## Get phylogenetic hypothesis from Megaphylogenies

### Prepare data 

#### Download plant inventories data from NEON

We will download data of plant inventories directly from NEON and to do that we will use the **R** package {**neonUtilities**} and the function '*loadByProduct*'. Before proceed let's take a look at the core information required in this function. To do that you just can type **?loadByProduct** in your console and the documentation for this function will appear in the Help window of RStudio.

The core information we need to inform in the '*loadByProduct*' function are:

1. __dpID__ = The identifier of the NEON data product to pull, in the form DPL.PRNUM.REV, e.g. DP1.10023.001.

2. __site__ = Either the string 'all', meaning all available sites, or a character vector of 4-letter NEON site codes, e.g. c('ONAQ','RMNP'). Defaults to all.

3. __package__ = Either 'basic' or 'expanded', indicating which data package to download. Defaults to basic.

As you can see, the __dpID__ and __site__ correspond to the kind of data we want to download and the site to the location where the data were collected, respectively. We can open the NEON website to find the information required for downloading the data for [**plant presence and percent cover**](https://data.neonscience.org/data-products/DP1.10058.001/RELEASE-2021/). Also, you can look at the map of [NEON sites](https://data.neonscience.org/data-products/explore) to see the distribution of NEON sites across The United States.

For this practice we will use the next information: __dpID__ = __"DP1.10058.001"__ and __site__ = __c("HARV")__ that correspond to __plant presence and percent cover__ and the site: __HARV__ (Harvard Forest & Quabbin Watershed NEON, MA). Note that you can download data only for all sites but for the sake of getting more practice in data management in R we will download the full data of plant community data for one site (you can download data for more sites if you prefer).

```{r}
#| eval: false

# Set global option to NOT convert all character variables to factors
options(stringsAsFactors = FALSE)

NEON_data <- loadByProduct(dpID = "DP1.10058.001", 
                        site = "HARV", 
                        package = "expanded", 
                        check.size = TRUE)

# type "y" (with no quotes) in your console to start downloading the data from NEON

```

Let's inspect the downloaded data.

```{r}
#| eval: true

load("../data/NEON/RawData_NEON_HARV.RData")

names(NEON_data)

#View(NEON_data$div_10m2Data100m2Data)

#View(NEON_data$div_1m2Data)

```

Save the raw data in your hard drive - this is a common practice that allow reproducibility and also save you a lot of time.

```{r}
#| eval: false

dir.create("../data/NEON")

save(NEON_data, file = "../data/NEON/RawData_NEON_HARV.RData")

```

The data of abundance of plants correspond to the object __"div_1m2Data"__, thus let's isolate that data from the rawdata. 

```{r}
#| eval: true

sel <- NEON_data$div_1m2Data %>% 
  select(namedLocation, domainID, siteID, plotType, plotID, subplotID, endDate, 
         taxonID, taxonRank, family, scientificName, nativeStatusCode, 
         percentCover, heightPlantSpecies)

unique(sel$namedLocation)
unique(sel$siteID)
unique(sel$endDate)

```

The isolated data is a data.frame of 86,813 rows and 14 columns. Some information is not required so let's clean the data a little bit and select information for only one site and a single period of time.

```{r}
#| eval: true

sel <- sel %>% 
  drop_na(scientificName) %>% # Removing NAs in the column of species
  mutate(Date = endDate) %>% 
  separate(endDate, sep = "-", 
           into = c("Year", "Month", "Day"))

unique(sel$Year)
unique(sel$siteID)

```

Select the site __HARV__ and the year __2022__.

```{r}
#| eval: true

HARV <- sel %>% 
  filter(Year == 2022)

unique(HARV$Year)
unique(HARV$siteID)

head(HARV, 10)

```

### Check taxonomy

The data corresponding to NEON site HARV for the 2022 contains 1220 rows or observations and 17 columns or variables. If we look at the data, specifically to the column __scientificName__ we can see that the taxonomy used in NEON correspond to the taxonomy used by the [USDA](https://plants.sc.egov.usda.gov/classification.html), however this taxonomy is not necessarily used by scholars (ðŸ¤”ðŸ˜µðŸ«£). We generally rely for example on the taxonomy of the APG [Angiosperm Phylogeny Group](http://www.mobot.org/MOBOT/research/APweb/) for Angiosperms and WCSP [World Checklist of Conifers](http://wcsp.science.kew.org/prepareChecklist.do?checklist=selected_families%40%40080210320211453826) for Gymnosperms. More recently the initiative [**Plants of the World**](https://powo.science.kew.org) was launched and as today is the most reliable source to check the taxonomic names of plant species. 

```{r}
#| eval: true

glimpse(HARV)

```

In any case, we need to standardize the species names in order to proceed with the exercise.

To standardize the species names, you can use the steps described [HERE](https://github.com/jesusNPL/CDR_phyfunc/blob/main/R/0.CDR-LTR_taxonomic_resolution.R). 

However, for simplicity we will use the **[Taxonomic Name Resolution Service (TNRS)](https://tnrs.biendata.org)** tool, that basically is a web interface that use the **Plants of the World** as a base source.

The only thing we need to do is to copy the scientific names and paste on the TNRS tool.

```{r}
#| eval: true

# vector with scientific names
spp <- HARV %>% 
  select(scientificName) %>% 
  distinct()

# print the species names
head(spp, 10)

# save names and open with excel or numbers
write_csv(spp, 
          file = "../data/NEON/HARV_spp_names_2022.csv")

```

The next step is to open the file **HARV_spp_names_2022.csv**. Then, copy the species names and paste them into the TRNL website. Next, click on the **submit** tab and then click on the **Download Data** tab. A small window will pop out (see image below), and click in **DOWNLOAD**.

![TRNL](../Screenshot_TRNL.png)

A **.CSV** file named **tnrs_result.csv** will be downloaded to your **Downloads** folder. Please copy the file and paste it into the folder **data/NEON** of this tutorial.

Now we will upload the standardized species names through the TRNL tool and match these names with the ones in the species composition dataset or **HARV data**.

```{r}
#| eval: true
spp_check <- read_csv("../data/NEON/tnrs_result.csv")

head(spp_check, 10)

```

Select the necessary information and combine it with the HARV data.

```{r}
#| eval: true

taxonomy <- spp_check %>% 
  select(Name_submitted, Accepted_family, Genus_matched, 
         Specific_epithet_matched, Accepted_species) %>% 
  mutate(Specific_epithet_matched = if_else(is.na(Specific_epithet_matched), 
                                            "sp.", Specific_epithet_matched)) %>% 
  mutate(species = paste(Genus_matched, Specific_epithet_matched)) %>% 
  rename(genus = Genus_matched) %>% 
  drop_na(Accepted_family, genus) %>% 
  distinct(species, .keep_all = TRUE)

taxonomy$Name_submitted[4] <- "Tsuga canadensis (L.) CarriÃ¨re"
taxonomy$Name_submitted[16] <- "Ilex mucronata (L.) Powell, Savolainen & Andrews"
#taxonomy$Name_submitted[55] <- "Lysimachia terrestris (L.) Britton, Sterns & Poggenb."
taxonomy$Name_submitted[77] <- "Lycopodium hickeyi W.H. Wagner, Beitel & Moran"

```

Now let's combine the new taxonomic information with our NEON data.

```{r}
#| eval: true

HARV_data <- right_join(x = HARV, 
                       y = taxonomy, 
                       by = c("scientificName" = "Name_submitted"))

```

We can select some specific columns that we will use from now on.

```{r}
#| eval: true

HARV_data <- HARV_data %>% 
  select(siteID, plotID, subplotID, Accepted_family, genus, species, percentCover) %>% 
  drop_na(species)

head(HARV_data)

```

### Get phylogenetic hypothesis 

Alright, until here we have downloaded, cleaned and prepared plant community data for the NEON site HARV. The next step is to prepare the phylogeny for those communities or a community level phylogeny. To do that we will use the most up to date phylogeny of vascular plants [Constructing a broadly inclusive seed plant phylogeny](https://bsapubs.onlinelibrary.wiley.com/doi/full/10.1002/ajb2.1019) and the R package {**V.PhyloMaker**}.

#### Get taxonomic table

```{r}
#| eval: true

# Prepare the taxonomy data to extract the phylogeny
sppPhylo <- HARV_data %>% 
  distinct(Accepted_family, genus, species) %>% # identify unique values
  select(species, genus, family = Accepted_family)  # select columns
  
head(sppPhylo, 10)

```

#### Get phylogeny 

Prepare the phylogeny and plot it.

```{r}
#| eval: true

result <- V.PhyloMaker::phylo.maker(sppPhylo, 
                                    scenarios = "S3") # this will take some time.

```

Explore the results

See which species were added to the megaphylogeny

```{r}
#| eval: true

glimpse(result$species.list)

```

Explore the phylogeny

```{r}
#| eval: true

str(result$scenario.3)

```

Double check the results 

```{r}
#| eval: true

phylo <- multi2di(result$scenario.3)

# Check if our phylogeny is ultrametric
is.ultrametric(phylo)

# Check is our phylogeny is bifurcated 
is.binary.phylo(phylo)

plot(phylo, show.tip.label = FALSE)

axisPhylo()

```

Save results 

```{r}
#| eval: false

dir.create("../output/Phylogeny")

# Save taxonomy
write_csv(result$species.list, 
          file = "../output/Phylogeny/HARV_taxonomic_constraint.csv")

# Save phylogeny
write.nexus(result$scenario.3, 
            file = "../output/Phylogeny/HARV_phylogeny.nex")

```

Clean environment

```{r}
#| eval: true

rm(list = ls())

```

# Part 2 - Intro to phylogenies and the comparative method

Load the data. Instead of reading files from the computer we will pull the required data directly from the internet.

```{r}
#| eval: true

## Trait data
nimbiosData <- read_csv("../data/NIMBios_spectra_sample.csv") %>% 
  column_to_rownames("species")

## Phylogenetic data
nimbiosTree <- read.nexus("../data/NIMBioS_phylogeny.nex")

```

::: callout-tip
## The pipe (%\>%) operator

This operator is, maybe, the most used operator from the {dplyr} package and is used to perform a sequence of operations on a data frame. In other words, the pipe operator simply feeds the results of one operation into the next operation below it.
:::

OK. You should be ready to go.

Let's inspect the data first, you can use the function **"glimpse()"** of the R package **{dplyr}**

```{r}
#| eval: true

nimbiosData[1:10, 1:5]

```

Let's check if our trait data contain the same species as the phylogeny

```{r}
#| eval: true

tmp <- name.check(phy = nimbiosTree, data = nimbiosData)

# print the results
head(tmp$tree_not_data, 10)

tmp$data_not_tree

```

It indicates that over 408 species are not present in the spectra data, so let's drop these species from the phylogeny. To do that we will use the function **drop.tip()** of the package **{ape}**

```{r}
#| eval: true

nimbiosTree <- drop.tip(phy = nimbiosTree, tip = tmp$tree_not_data)

# print resulting tree
nimbiosTree

```

We can double check if our data match after dropping the missing species

```{r}
#| eval: true

name.check(phy = nimbiosTree, data = nimbiosData)

```

Now it seems that we are ready to go!

## Working with trees

Letâ€™s start by looking at the phylogeny of these birds and learning a bit about how to work with trees in R.

*What does your tree look like?*

```{r}
#| eval: true

plot(ladderize(nimbiosTree))

axisPhylo()

```

Whoa. That's ugly. Let's clean it up.

```{r}
#| eval: true

plot.phylo(ladderize(nimbiosTree), 
           no.margin = TRUE, 
           cex = 0.5)

axisPhylo()

```

Better. You can mess around with tree plotting functions in **plot.phylo()** as much as you'd like. Try this for example:

```{r}
#| eval: true

plot.phylo(nimbiosTree, 
           type = "fan", 
           no.margin = TRUE, 
           cex = 0.5)

```

Much much better.

It may be useful to understand how trees are encoded in R. Typing in just the name of the tree file like this:

```{r}
#| eval: true

nimbiosTree

```

that will give you basic information about the phylogeny: the number of tips and nodes; what the tips are called; whether the tree is rooted; and if it has branch lengths.

```{r}
#| eval: true

str(nimbiosTree)

```

will tell you more about tree structure. Trees consist of tips connected by edges (AKA branches)

```{r}
#| eval: true

nimbiosTree$tip.label

```

gives you a list of all your terminal taxa, which are by default numbered 1-n, where n is the number of taxa.

```{r}
#| eval: true

nimbiosTree$Nnode

```

gives you the number of nodes. This is a fully bifurcating rooted tree, so it has 1 fewer node than the number of taxa.

```{r}
#| eval: true

head(nimbiosTree$edge, 10)

```

This tells you the beginning and ending node for all edges.

Put that all together with the following lines

```{r}
#| eval: true

plot.phylo(nimbiosTree, 
           type = "fan", 
           no.margin = TRUE, 
           cex = 0.5, 
           label.offset = 0.1, 
           show.tip.label = TRUE)

nodelabels(cex = 0.3)

#tiplabels(cex = 0.5)

```

There are many ways to manipulate trees in R using **{ape}**, **{Phytools}**, and other packages. This just gives you a bare-bones introduction.

## Working with a data matrix and testing hypotheses in a phylogenetically informed way

Let's ask some questions using the spectra data that were extracted from NEON. First, explore the data in the "nimbiosData" matrix. Here are some options for visualizing data matrices:

```{r}
#| eval: true

#nimbiosData # this will show you the first few rows of your data matrix and its header

nimbiosData %>% 
  dimnames() # this will show you the row and column headers for your matrix

#nimbiosData %>% 
 # View() # this will let you visualize the entire matrix

```

Hyperspectral data is composed of hundreds of bands let's isolate a single band to work so we can work with it easily:

```{r}
#| eval: true

wl400 <- nimbiosData[, "400"] 
names(wl400) <- rownames(nimbiosData) 
# data vectors have to be labelled with tip names for the associated tree. 
# This is how to do that. 

```

::: callout-tip
## Exploring the data

It is good practice to check the distribution of your data before doing downstream analysis.
:::

```{r}
#| eval: true

nimbiosData %>% 
  ggplot(aes(x = `400`)) + 
  geom_histogram() + 
  xlab("Wavelenght 400") + 
  theme_minimal() + 
  theme(
    axis.text = element_text(size = 17, colour = "black"),
    axis.title = element_text(size = 20), 
  )

```

When we work with comparative data we start exploring different sets of evolutionary models. The most common is the model of character evolution, called **Brownian Motion** model. This model assumes that a trait evolves from a starting state (**z0**) according to a random walk with the variance specified by the rate parameter $\sigma^{2}$ (**sigma-squared**). In short, Brownian motion describes a process in which tip states are modeled under the assumption of a multivariate normal distribution. On a phylogeny, the multivariate mean of tip states is equal to the root state estimate, and variance accumulates linearly through time.


```{r}
#| eval: true

brownianModel <- fitContinuous(phy = nimbiosTree, 
                               dat = wl400)

brownianModel # this will show you the fit statistics and parameter values

```

Here, you can see the estimates for ancestral state (z0), and the rate parameter ($\sigma^{2}$), as well as some measures of model fit. The fit of the model is determined using maximum likelihood, and expressed as a log likelihood **(lnL)**. The higher the **lnL**, the more probable the data given the model. However, when comparing different models, we can't use the **lnL**, because it does not account for the difference in the number of parameters among models. Models with more parameters will always fit better, but do they fit significantly better? For example, an OU model has 4 parameters (alpha \[$\alpha$\], theta \[$\theta$\], z0, and sigma-squared \[$\sigma^{2}$\]), so it should fit better than a BM model, which includes only z0 and sigsq. To account for this, statisticians have developed another measure of fit called the AIC (Akaike Information Criterion): **AIC = (2xN)-2xlnL**, where **N** is the number of parameters. This penalizes the likelihood score for adding parameters. When selecting among a set of models, the one with the lowest AIC is preferred. We will use this information later on in this lab.

In addition to assessing model fit, we can use the Brownian Motion model to reconstruct ancestral states of a character on a tree. To visualize what BM evolution of this trait looks like on a tree. The *contMap()* command in {phytools} estimates the ancestral states and plots them on a tree.

```{r}
#| eval: true

## Calculate number of trait shifts
obj <- contMap(nimbiosTree, 
        wl400, 
        fsize = 0.1, 
        lwd = 1.5, 
        type = "fan", 
        plot = FALSE)

# change colors
obj <- setMap(obj, 
              c("white", "#FFFFB2", "#FECC5C", "#FD8D3C", "#E31A1C")) 

# Plot the results
plot(obj, 
     fsize = c(0.1, 0.8), 
     leg.txt = "Wavelength 402")

```

## Model Fitting

Brownian Motion is only one model of evolution for a continuous variable. Another model is the **Ornstein-Uhlenbeck (OU)** model, which allows the trait mean to evolve towards a new state (theta \[$\theta$\]), with a selective force (alpha \[$\alpha$\]). These two new parameters, plus the starting state (z0) and the rate of evolution (sigsq \[$\sigma^{2}$\]) parameters from the BM model, make for a 4-parameter model. The **Early Burst (EB)** model allows the rate of evolution to change across the tree, where the early rate of evolution is high and declines over time (presumably as niches are filled during an adaptive radiation. The rate of evolution changes exponentially over time and is specified under the model r\[t\] = r\[0\] x exp(a x t), where r\[0\] is the initial rate, a is the rate change parameter, and t is time. The maximum bound is set to -0.000001, representing a decelerating rate of evolution. The minimum bound is set to $log(10^{-5})$/depth of the tree.

Letâ€™s evaluate the relative fit of these three models to the Hand-wing index trait.

### Brownian Motion (BM)

```{r}
#| eval: true

brownianModel <- fitContinuous(phy = nimbiosTree, 
                               dat = wl400, # trait 
                               model = "BM") # evolutionary model

```

### Ornstein-Uhlenbeck (OU)

```{r}
#| eval: true

OUModel <- fitContinuous(phy = nimbiosTree, 
                               dat = wl400, 
                         model = "OU")

```

### Early Burst (EB)

```{r}
#| eval: true

EBModel <- fitContinuous(phy = nimbiosTree, 
                         dat = wl400, 
                         model = "EB")

```

And recover the parameter values and fit estimates.

```{r}
#| eval: true

brownianModel

OUModel

EBModel

```


Compare all models and select the best fitting model. To to that, we will use AIC model comporison approach based on weights. 

```{r}
#| eval: true

# Vector of models
mods <- c(brownianModel$opt$aicc, OUModel$opt$aicc, EBModel$opt$aicc)
# rename the models
names(mods) <- c("BM", "OU", "EB")

# Run AIC weights 
aicw(mods)

```

According to the model comparison using AIC, the model that best fits the data is the OU model. The OU model also shows a slightly higher lnL value compared to the BM and EB models of evolution.

```{r}
#| eval: true

library(knitr)

aic_wl400 <- aicw(mods) 
names(aic_wl400)[1] <- "AIC"

aic_wl400$lnL <- c(brownianModel$opt$lnL, OUModel$opt$lnL, EBModel$opt$lnL)

kable(aic_wl400)

```

## Phylogenetic signal

Phylogenetic signal is the tendency of related species to resemble each other more than species drawn at random from the same tree.

### Blomberg's K

Blombergâ€™s K compares the variance of **PICs** to what we would expect under a Brownian motion (BM) model of evolution. **K = 1** means that close relatives resemble each other as much as we should expect under BM. **K \< 1** that there is less **phylogenetic signal** than expected under BM and **K \> 1** means that there is more. In addition, a significant p-value returned from a randomization test tells us that the phylogenetic signal is significant, in other words, close relatives are more similar than random pairs of taxa in the dataset.

```{r}
#| eval: true

# Run Blomber's K
K_wl400 <- phylosig(tree = nimbiosTree, # Phylogeny
                  x = wl400, # trait
                  method = "K", # method
                  test = TRUE)

# Print results
print(K_wl400)

```

```{r}
#| eval: true

# Plot results
plot(K_wl400)

```

### Pagel's Lambda

Pagelâ€™s $\lambda$ is a tree transformation that stretches the tip branches relative to internal branches, making the tree more and more like a complete polytomy of a star phylogeny. If $\lambda = 0$ there is no phylogenetic signal, while $\lambda = 1$ correspond to BM and $0 < \lambda < 1$ in between.

```{r}
#| eval: true

# Run Pagel's Lambda
LB_wl400 <- phylosig(tree = nimbiosTree, # Phylogeny
                  x = wl400, # trait
                  method = "lambda", 
                  test = TRUE)

# Print the results
print(LB_wl400)

# Plot thre results
plot(LB_wl400)

```

Wavelength 402 presents a low phylogenetic signal according to both metrics. Pagel's $\lambda$ = 0.8. Blomberg's K = 0.13 suggests that wavelength 402 presents phylogenetic signal but not as expected under the BM model of evolution. **Importantly**, both metrics deviate from the white noise null model.

## Phylogenetic signal for all wavelengths

Double check the match between the spectra data and the phylogeny

```{r}
#| eval: true

### Check info
setdiff(nimbiosTree$tip.label, rownames(nimbiosData))

### Assign rownames to column
nimbiosData <- nimbiosData %>% 
  rownames_to_column("species")

```

Now we will use a wrapper function to run multiple wavelenghts, but for the sake of sanity we will just run a sample of 10.

```{r}
#| eval: true

### Run Blomberg's K 
### Load wrapper functions
source("https://raw.githubusercontent.com/jesusNPL/SpecEvolution/main/R/wrappers.R")

# run only 10 bands
NIMBioS_PhyloSig <- demon_K(spectra = nimbiosData, # spectra in data.frame
                            tree = nimbiosTree, # phylogeny
                            nSIM = 1000, # number of simulations
                            nBands = 10) # number of bands


```

Explore the results

```{r}
#| eval: true

glimpse(NIMBioS_PhyloSig)

```

To finish this hands-on we can plot the spectra and Blomberg's K values. To do that we will upload the phylogenetic signal estimated using the entire dataset.

```{r}
#| eval: true

## Transform the long format
NIMBioS_spectra_long <- nimbiosData %>% 
  pivot_longer(!species, 
               names_to = "wavelength", 
               values_to = "reflectance") 

glimpse(NIMBioS_spectra_long)

```

Prepare Phylogenetic signal results for plotting

```{r}
#| eval: true

## Load phylogenetic signal
NIMBioS_PhyloSig <- read_csv("../output/NIMBios_K_phylosig.csv")

NIMBioS_PhyloSig <- NIMBioS_PhyloSig %>% 
  mutate(Pval_cat = if_else(K_pval <= 0.05, "diff", "no_diff")) %>% 
  mutate(wavelength = Band) %>% 
  mutate(species = Pval_cat) %>% 
  select(Band, wavelength, Pval_cat, species, everything()) %>% 
# Rename P-Values column to "species" to match column in the spectra (only for plot).
  mutate(extra_y = 0.15, "Blomberg's K" = K_obs) 

```


Plot the results

```{r}
#| eval: true

### Plot mean species and Blomberg's K values
library(ggnewscale)

p_ps_K <- NIMBioS_spectra_long %>% 
  ggplot(aes(x = as.numeric(wavelength), 
             y = reflectance, 
             colour = factor(species)
  )) +
  geom_line(linewidth = 0.5, alpha = 0.5, show.legend = FALSE) + 
  scale_colour_viridis_d(option = "turbo", direction = -1) + 
  # add a new scale color
  new_scale_color() + 
  # plot phylogenetic signal 
  geom_point(aes(x = wavelength, 
                 y = extra_y, 
                 color = species, 
                 size = `Blomberg's K`), # Pval_cat = species
             data = NIMBioS_PhyloSig, 
             inherit.aes = FALSE) + 
  scale_color_manual(name = "P-value", 
                     labels = c("< 0.05", "> 0.05"), 
                     values = c("no_diff" = "black", "diff" = "red")) + 
  guides(color = guide_legend(override.aes = list(size = 5))) + 
  xlab("Wavelength (nm)") + 
  scale_y_continuous(
    # Features of the first axis
    name = "Reflectance",
    # Add a second axis and specify its features
    # sec.axis = sec_axis(trans = ~.*1, name = "Blomberg's K")
  ) + 
  annotate("rect", 
           xmin = 400, xmax = 700, # Visible
           ymin = -Inf, ymax = Inf,  fill = "grey2", alpha = 0.1) + 
  annotate("text", x = 559:560, y = 0.2, label = "VIS", size  = 7) + 
  annotate("rect",
           xmin = 800, xmax = 1340, # NIR
           ymin = -Inf, ymax = Inf,  fill = "grey2", alpha = 0.1) + 
  annotate("text", x = 1070:1071, y = 0.2, label = "NIR", size  = 7) + 
  annotate("rect",
           xmin = 1445, xmax = 1790, # SWIR 1
           ymin = -Inf, ymax = Inf,  fill = "grey2", alpha = 0.1) + 
  annotate("text", x = 1620:1621, y = 0.2, label = "SWIR1", size  = 7) + 
  annotate("rect",
           xmin = 1955, xmax = 2400, # SWIR 2 
           ymin = -Inf, ymax = Inf,  fill = "grey2", alpha = 0.1) +  
  annotate("text", x = 2170:2171, y = 0.2, label = "SWIR2", size  = 7) + 
  theme_minimal() + 
  theme(
    legend.position = "right",
    legend.text = element_text(size = 18), 
    legend.title = element_text(size = 20), 
    axis.text = element_text(size = 17, colour = "black"),
    axis.title = element_text(size = 20), 
    plot.title = element_text(size = 20, vjust = -12, hjust = 0.05),
    plot.subtitle = element_text(size = 20, vjust = -10, hjust = 0.05)
  )

p_ps_K

```

Save the figure in our output folder

```{r}
#| eval: true

### Save results
pdf(file = "../output/Fig_NIMBioS_K_phyloSignal.pdf", 
    height = 7, width = 10)

p_ps_K

dev.off()

```
