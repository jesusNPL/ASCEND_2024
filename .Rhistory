check.size = TRUE,
easting = coords_HARV_001[1], northing = coords_HARV_001[2], # Coordinates UTM
savepath = "data", # Path
token = NA)
setwd("Dropbox/Teaching/ASCEND/ASCEND_2024/")
#| eval: false
# Package vector names
packages <- c("tidyverse", "ape", "geiger", "nlme",
"phytools", "neonUtilities", "devtools")
#| eval: false
# Install packages not yet installed
# get packages already installed
installed_packages <- packages %in% rownames(installed.packages())
# If the packages are installed skip if not install them
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages], dependencies = TRUE)
}
#| eval: false
if ( ! ("V.PhyloMaker" %in% installed.packages())) {remotes::install_github("jinyizju/V.PhyloMaker")}
library(tidyverse)
library(ape)
library(geiger)
library(nlme)
library(phytools)
library(neonUtilities)
library(V.PhyloMaker)
#| eval: false
spp_check <- read_csv("data/NEON/tnrs_result.csv")
getwd()
#| eval: false
spp_check <- read_csv("../data/NEON/tnrs_result.csv")
View(spp_check)
#| eval: false
taxonomy <- spp_check %>%
select(Name_submitted, Accepted_family, Genus_matched,
Specific_epithet_matched, Accepted_species) %>%
mutate(Specific_epithet_matched = if_else(is.na(Specific_epithet_matched),
"sp.", Specific_epithet_matched)) %>%
mutate(species = paste(Genus_matched, Specific_epithet_matched)) %>%
rename(genus = Genus_matched) %>%
drop_na(Accepted_family, genus) %>%
distinct(species, .keep_all = TRUE)
taxonomy$Name_submitted[4] <- "Tsuga canadensis (L.) Carrière"
taxonomy$Name_submitted[16] <- "Ilex mucronata (L.) Powell, Savolainen & Andrews"
#taxonomy$Name_submitted[55] <- "Lysimachia terrestris (L.) Britton, Sterns & Poggenb."
taxonomy$Name_submitted[77] <- "Lycopodium hickeyi W.H. Wagner, Beitel & Moran"
#| eval: false
HARV_data <- right_join(x = HARV,
y = taxonomy,
by = c("scientificName" = "Name_submitted"))
#| eval: false
load("../data/NEON/RawData_NEON_HARV.RData")
sel <- NEON_data$div_1m2Data %>%
select(namedLocation, domainID, siteID, plotType, plotID, subplotID, endDate,
taxonID, taxonRank, family, scientificName, nativeStatusCode,
percentCover, heightPlantSpecies)
unique(sel$namedLocation)
unique(sel$siteID)
unique(sel$endDate)
#| eval: false
HARV <- sel %>%
filter(Year == 2022)
#| eval: false
sel <- sel %>%
drop_na(scientificName) %>% # Removing NAs in the column of species
mutate(Date = endDate) %>%
separate(endDate, sep = "-",
into = c("Year", "Month", "Day"))
unique(sel$Year)
unique(sel$siteID)
#| eval: false
HARV <- sel %>%
filter(Year == 2022)
unique(HARV$Year)
unique(HARV$siteID)
head(HARV)
#| eval: false
glimpse(HARV)
#| eval: false
# vector with scientific names
spp <- HARV %>%
select(scientificName) %>%
distinct()
# print the species names
spp
# save names and open with excel or numbers
write_csv(spp,
file = "../data/NEON/HARV_spp_names_2022.csv")
#| eval: false
spp_check <- read_csv("../data/NEON/tnrs_result.csv")
head(spp_check)
#| eval: false
taxonomy <- spp_check %>%
select(Name_submitted, Accepted_family, Genus_matched,
Specific_epithet_matched, Accepted_species) %>%
mutate(Specific_epithet_matched = if_else(is.na(Specific_epithet_matched),
"sp.", Specific_epithet_matched)) %>%
mutate(species = paste(Genus_matched, Specific_epithet_matched)) %>%
rename(genus = Genus_matched) %>%
drop_na(Accepted_family, genus) %>%
distinct(species, .keep_all = TRUE)
taxonomy$Name_submitted[4] <- "Tsuga canadensis (L.) Carrière"
taxonomy$Name_submitted[16] <- "Ilex mucronata (L.) Powell, Savolainen & Andrews"
#taxonomy$Name_submitted[55] <- "Lysimachia terrestris (L.) Britton, Sterns & Poggenb."
taxonomy$Name_submitted[77] <- "Lycopodium hickeyi W.H. Wagner, Beitel & Moran"
#| eval: false
HARV_data <- right_join(x = HARV,
y = taxonomy,
by = c("scientificName" = "Name_submitted"))
#| eval: false
HARV_data <- HARV_data %>%
select(siteID, plotID, subplotID, Accepted_family, genus, species, percentCover) %>%
drop_na(species)
head(HARV_data)
#| eval: false
# Prepare the taxonomy data to extract the phylogeny
sppPhylo <- HARV_data %>%
distinct(Accepted_family, genus, species) %>% # identify unique values
select(species, genus, family = Accepted_family)  # select columns
sppPhylo
#| eval: false
result <- V.PhyloMaker::phylo.maker(sppPhylo,
scenarios = "S3") # this will take some time.
#| eval: false
glimpse(result$species.list)
#| eval: false
str(result$scenario.3)
#| eval: false
phylo <- multi2di(result$scenario.3)
# Check if our phylogeny is ultrametric
is.ultrametric(phylo)
# Check is our phylogeny is bifurcated
is.binary.phylo(phylo)
plot(phylo, show.tip.label = FALSE)
axisPhylo()
dir.create("../output/Phylogeny")
# Save taxonomy
write_csv(result$species.list,
file = "../data/HARV_taxonomic_constraint.csv")
dir.create("../output/Phylogeny")
# Save taxonomy
write_csv(result$species.list,
file = "../output/Phylogeny/HARV_taxonomic_constraint.csv")
# Save phylogeny
write.nexus(result$scenario.3,
file = "../output/Phylogeny/HARV_phylogeny.nex")
rm(list = ls())
## Trait data
neonData <- read_csv("../data/NEON_airborne_spectra_CLEAN_NAS.csv") %>%
column_to_rownames("species")
## Phylogenetic data
neonTree <- read.nexus("../data/phylo_ALL_NEON_S3.nex")
#| eval: false
glimpse(neonData)
#| eval: false
tmp <- name.check(phy = neonTree, data = neonData)
# print the results
tmp
#| eval: false
neonTree <- drop.tip(phy = neonTree, tip = tmp$tree_not_data)
#| eval: false
name.check(phy = neonTree, data = neonData)
#| eval: false
plot(ladderize(neonTree))
#| eval: false
plot(ladderize(neonTree)show.tip.label = FALSE)
#| eval: false
plot(ladderize(neonTree),
show.tip.label = FALSE)
axisPhylo()
#| eval: false
plot.phylo(ladderize(neonTree),
no.margin = TRUE,
cex = 0.5)
#| eval: false
plot(ladderize(neonTree))
axisPhylo()
#| eval: false
plot.phylo(ladderize(neonTree),
no.margin = TRUE,
cex = 0.5)
axisPhylo()
#| eval: false
plot.phylo(neonTree,
type = "fan",
no.margin = TRUE,
cex = 0.3)
#| eval: false
plot.phylo(neonTree,
type = "fan",
no.margin = TRUE,
cex = 0.5)
#| eval: false
neonTree
#| eval: false
str(neonTree)
#| eval: false
neonTree$tip.label
#| eval: false
neonTree$Nnode
#| eval: false
neonTree$edge
#| eval: false
plot.phylo(neonTree,
type = "fan",
no.margin = TRUE,
cex = 0.7,
label.offset = 0.1,
show.tip.label = FALSE)
nodelabels(cex = 0.3)
tiplabels(cex = 0.5)
#| eval: false
plot.phylo(neonTree,
type = "fan",
no.margin = TRUE,
cex = 0.7,
label.offset = 0.1,
show.tip.label = FALSE)
nodelabels(cex = 0.3)
tiplabels(cex = 0.1)
#| eval: false
plot.phylo(neonTree,
type = "fan",
no.margin = TRUE,
cex = 0.7,
label.offset = 0.1,
show.tip.label = FALSE)
nodelabels(cex = 0.3)
#tiplabels(cex = 0.5)
#| eval: false
plot.phylo(neonTree,
type = "fan",
no.margin = TRUE,
cex = 0.7,
label.offset = 0.1,
show.tip.label = TRUE)
nodelabels(cex = 0.3)
#tiplabels(cex = 0.5)
#| eval: false
plot.phylo(neonTree,
type = "fan",
no.margin = TRUE,
cex = 0.3,
label.offset = 0.1,
show.tip.label = TRUE)
nodelabels(cex = 0.3)
#tiplabels(cex = 0.5)
#| eval: false
plot.phylo(neonTree,
type = "fan",
no.margin = TRUE,
cex = 0.5,
label.offset = 0.1,
show.tip.label = TRUE)
nodelabels(cex = 0.3)
#tiplabels(cex = 0.5)
neonData %>%
head() # this will show you the first few rows of your data matrix and its header
neonData %>%
dimnames() # this will show you the row and column headers for your matrix
wl402 <- neonData[, "402"]
names(wl402) <- rownames(neonData)
# data vectors have to be labelled with tip names for the associated tree.
# This is how to do that.
hist(wl402)
#| eval: false
hist(log(hwi))
#| eval: false
hist(log(wl402))
#| eval: false
brownianModel <- fitContinuous(phy = neonTree,
dat = wl402)
brownianModel # this will show you the fit statistics and parameter values
#| eval: false
## Calculate number of trait shifts
obj <- contMap(neonTree,
wl402,
fsize = 0.1,
lwd = 2,
type = "fan",
plot = FALSE)
# change colors
obj <- setMap(obj,
c("white", "#FFFFB2", "#FECC5C", "#FD8D3C", "#E31A1C"))
# Plot the results
plot(obj,
fsize = c(0.1, 0.8),
leg.txt = "Wavelength 402")
#| eval: false
## Calculate number of trait shifts
obj <- contMap(neonTree,
wl402,
fsize = 0.1,
lwd = 1.5,
type = "fan",
plot = FALSE)
# change colors
obj <- setMap(obj,
c("white", "#FFFFB2", "#FECC5C", "#FD8D3C", "#E31A1C"))
# Plot the results
plot(obj,
fsize = c(0.1, 0.8),
leg.txt = "Wavelength 402")
neonData
#| eval: false
OUModel <- fitContinuous(phy = furnariidaeTree,
dat = wl402,
model = "OU")
OUModel <- fitContinuous(phy = neonTree,
dat = wl402,
model = "OU")
EBModel <- fitContinuous(phy = neonTree,
dat = wl402,
model = "EB")
#| eval: false
brownianModel
OUModel
EBModel
#| eval: false
# Vector of models
mods <- c(brownianModel$opt$aicc, OUModel$opt$aicc, EBModel$opt$aicc)
# rename the models
names(mods) <- c("BM", "OU", "EB")
# Run AIC weights
aicw(mods)
library(knitr)
aic_wl402 <- aicw(mods)
names(aic_wl402)[1] <- "AIC"
aic_wl402$lnL <- c(brownianModel$opt$lnL, OUModel$opt$lnL, EBModel$opt$lnL)
kable(aic_wl402)
#| eval: false
brownianModel <- fitContinuous(phy = neonTree,
dat = wl402, # trait
model = "BM") # evolutionary model
#| eval: false
OUModel <- fitContinuous(phy = neonTree,
dat = wl402,
model = "OU")
#| eval: false
EBModel <- fitContinuous(phy = neonTree,
dat = wl402,
model = "EB")
#| eval: false
brownianModel
OUModel
EBModel
#| eval: false
# Vector of models
mods <- c(brownianModel$opt$aicc, OUModel$opt$aicc, EBModel$opt$aicc)
# rename the models
names(mods) <- c("BM", "OU", "EB")
# Run AIC weights
aicw(mods)
library(knitr)
aic_wl402 <- aicw(mods)
names(aic_wl402)[1] <- "AIC"
aic_wl402$lnL <- c(brownianModel$opt$lnL, OUModel$opt$lnL, EBModel$opt$lnL)
kable(aic_wl402)
#| eval: false
# Run Blomber's K
K_wl402 <- phylosig(tree = neonTree, # Phylogeny
x = wl402, # trait
method = "K", # method
test = TRUE)
# Print results
print(K_hwi)
#| eval: false
# Run Blomber's K
K_wl402 <- phylosig(tree = neonTree, # Phylogeny
x = wl402, # trait
method = "K", # method
test = TRUE)
# Print results
print(K_wl402)
# Plot results
plot(K_wl402)
#| eval: false
# Run Blomber's K
K_wl402 <- phylosig(tree = neonTree, # Phylogeny
x = wl402, # trait
method = "K", # method
test = TRUE)
# Print results
print(K_wl402)
#| eval: false
# Plot results
plot(K_wl402)
#| eval: false
# Run Pagel's Lambda
LB_wl402 <- phylosig(tree = neonTree, # Phylogeny
x = wl402, # trait
method = "lambda",
test = TRUE)
# Print the results
print(LB_wl402)
# Plot thre results
plot(LB_wl402)
### Check info
setdiff(neonTree$tip.label, rownames(neonData))
rownames(neonData)
### Assign rownames to column
neonData <- neonData %>%
rownames_to_column("species")
View(neonData)
class(neonData)
#| eval: false
### Run Blomberg's K
# run only 10 bands
NEON_HS_PhyloSig <- demon_K(spectra = neonData, # spectra in data.frame
tree = neonTree, # phylogeny
nSIM = 1000, # number of simulations
nBands = 10) # number of bands
#| eval: false
### Run Blomberg's K
### Load wrapper functions
source("https://raw.githubusercontent.com/jesusNPL/SpecEvolution/main/R/wrappers.R")
# run only 10 bands
NEON_HS_PhyloSig <- demon_K(spectra = neonData, # spectra in data.frame
tree = neonTree, # phylogeny
nSIM = 1000, # number of simulations
nBands = 10) # number of bands
NEON_HS_PhyloSig
glimpse(NEON_HS_PhyloSig)
## Transform the long format
NEON_HS_long <- neonData %>%
pivot_longer(!species,
names_to = "wavelength",
values_to = "reflectance")
View(NEON_HS_long)
## Load phylogenetic signal
NEON_HS_PhyloSig <- read_csv("output/NEON_K_phylosig_CLEAN.csv")
## Load phylogenetic signal
NEON_HS_PhyloSig <- read_csv("../output/NEON_K_phylosig_CLEAN.csv")
#| eval: false
### Plot mean species and Blomberg's K values
library(ggnewscale)
p_ps_K <- NEON_HS_long %>%
ggplot(aes(x = as.numeric(wavelength),
y = reflectance,
colour = factor(species)
)) +
geom_line(linewidth = 0.5, alpha = 0.5, show.legend = FALSE) +
scale_colour_viridis_d(option = "turbo", direction = -1) +
# add a new scale color
new_scale_color() +
# plot phylogenetic signal
geom_point(aes(x = as.numeric(WL_num),
y = extra_y,
color = species,
size = `Blomberg's K`), # Pval_cat = species
data = NEON_HS_PhyloSig ,
inherit.aes = FALSE) +
scale_color_manual(name = "P-value",
labels = c("< 0.05", "> 0.05"),
values = c("no_diff" = "black", "diff" = "red")) +
guides(color = guide_legend(override.aes = list(size = 5))) +
xlab("Wavelength (nm)") +
scale_y_continuous(
# Features of the first axis
name = "Reflectance",
# Add a second axis and specify its features
# sec.axis = sec_axis(trans = ~.*1, name = "Blomberg's K")
) +
annotate("rect",
xmin = 400, xmax = 700, # Visible
ymin = -Inf, ymax = Inf,  fill = "grey2", alpha = 0.1) +
annotate("text", x = 559:560, y = 0.2, label = "VIS", size  = 7) +
annotate("rect",
xmin = 800, xmax = 1340, # NIR
ymin = -Inf, ymax = Inf,  fill = "grey2", alpha = 0.1) +
annotate("text", x = 1070:1071, y = 0.2, label = "NIR", size  = 7) +
annotate("rect",
xmin = 1445, xmax = 1790, # SWIR 1
ymin = -Inf, ymax = Inf,  fill = "grey2", alpha = 0.1) +
annotate("text", x = 1620:1621, y = 0.2, label = "SWIR1", size  = 7) +
annotate("rect",
xmin = 1955, xmax = 2400, # SWIR 2
ymin = -Inf, ymax = Inf,  fill = "grey2", alpha = 0.1) +
annotate("text", x = 2170:2171, y = 0.2, label = "SWIR2", size  = 7) +
theme_minimal() +
theme(
legend.position = "right",
legend.text = element_text(size = 18),
legend.title = element_text(size = 20),
axis.text = element_text(size = 17, colour = "black"),
axis.title = element_text(size = 20),
plot.title = element_text(size = 20, vjust = -12, hjust = 0.05),
plot.subtitle = element_text(size = 20, vjust = -10, hjust = 0.05)
)
p_ps_K
#| eval: false
### Save results
pdf(file = "../output/Fig_NEON_HS_phyloSignal.pdf",
height = 7, width = 10)
p_ps_K
dev.off()
#| eval: true
head(neonTree$edge, 10)
neonData
## Trait data
neonData <- read_csv("../data/NEON_airborne_spectra_CLEAN_NAS.csv") %>%
column_to_rownames("species")
## Phylogenetic data
neonTree <- read.nexus("../data/phylo_ALL_NEON_S3.nex")
neonData
class(neonData)
neonData[1:10, 1:10]
neonData[1:10, 1:10]
neonData[1:5, 1:10]
neonData[1:10, 1:5]
# print the results
head(tmp$tree_not_data, 10)
